// Code generated by go-swagger; DO NOT EDIT.

package default_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "mustrum/server/models"
)

// NewControllersDefaultControllerMonolinePutParams creates a new ControllersDefaultControllerMonolinePutParams object
// no default values defined in spec.
func NewControllersDefaultControllerMonolinePutParams() ControllersDefaultControllerMonolinePutParams {

	return ControllersDefaultControllerMonolinePutParams{}
}

// ControllersDefaultControllerMonolinePutParams contains all the bound params for the controllers default controller monoline put operation
// typically these are obtained from a http.Request
//
// swagger:parameters controllers.default_controller.monoline_put
type ControllersDefaultControllerMonolinePutParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	Colour *models.Colour
	/*location of line
	  In: query
	*/
	Line *float64
	/*bitmap of pixels to show
	  In: query
	*/
	Pixelmap *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewControllersDefaultControllerMonolinePutParams() beforehand.
func (o *ControllersDefaultControllerMonolinePutParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Colour
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("colour", "body"))
			} else {
				res = append(res, errors.NewParseError("colour", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Colour = &body
			}
		}
	} else {
		res = append(res, errors.Required("colour", "body"))
	}
	qLine, qhkLine, _ := qs.GetOK("line")
	if err := o.bindLine(qLine, qhkLine, route.Formats); err != nil {
		res = append(res, err)
	}

	qPixelmap, qhkPixelmap, _ := qs.GetOK("pixelmap")
	if err := o.bindPixelmap(qPixelmap, qhkPixelmap, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLine binds and validates parameter Line from query.
func (o *ControllersDefaultControllerMonolinePutParams) bindLine(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("line", "query", "float64", raw)
	}
	o.Line = &value

	return nil
}

// bindPixelmap binds and validates parameter Pixelmap from query.
func (o *ControllersDefaultControllerMonolinePutParams) bindPixelmap(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Pixelmap = &raw

	return nil
}
