// Code generated by go-swagger; DO NOT EDIT.

package default_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ControllersDefaultControllerShowGetHandlerFunc turns a function with the right signature into a controllers default controller show get handler
type ControllersDefaultControllerShowGetHandlerFunc func(ControllersDefaultControllerShowGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ControllersDefaultControllerShowGetHandlerFunc) Handle(params ControllersDefaultControllerShowGetParams) middleware.Responder {
	return fn(params)
}

// ControllersDefaultControllerShowGetHandler interface for that can handle valid controllers default controller show get params
type ControllersDefaultControllerShowGetHandler interface {
	Handle(ControllersDefaultControllerShowGetParams) middleware.Responder
}

// NewControllersDefaultControllerShowGet creates a new http.Handler for the controllers default controller show get operation
func NewControllersDefaultControllerShowGet(ctx *middleware.Context, handler ControllersDefaultControllerShowGetHandler) *ControllersDefaultControllerShowGet {
	return &ControllersDefaultControllerShowGet{Context: ctx, Handler: handler}
}

/*ControllersDefaultControllerShowGet swagger:route GET /show default_controller controllersDefaultControllerShowGet

Show all set pixels

*/
type ControllersDefaultControllerShowGet struct {
	Context *middleware.Context
	Handler ControllersDefaultControllerShowGetHandler
}

func (o *ControllersDefaultControllerShowGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewControllersDefaultControllerShowGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
