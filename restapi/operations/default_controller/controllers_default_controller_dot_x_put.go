// Code generated by go-swagger; DO NOT EDIT.

package default_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ControllersDefaultControllerDotXPutHandlerFunc turns a function with the right signature into a controllers default controller dot x put handler
type ControllersDefaultControllerDotXPutHandlerFunc func(ControllersDefaultControllerDotXPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ControllersDefaultControllerDotXPutHandlerFunc) Handle(params ControllersDefaultControllerDotXPutParams) middleware.Responder {
	return fn(params)
}

// ControllersDefaultControllerDotXPutHandler interface for that can handle valid controllers default controller dot x put params
type ControllersDefaultControllerDotXPutHandler interface {
	Handle(ControllersDefaultControllerDotXPutParams) middleware.Responder
}

// NewControllersDefaultControllerDotXPut creates a new http.Handler for the controllers default controller dot x put operation
func NewControllersDefaultControllerDotXPut(ctx *middleware.Context, handler ControllersDefaultControllerDotXPutHandler) *ControllersDefaultControllerDotXPut {
	return &ControllersDefaultControllerDotXPut{Context: ctx, Handler: handler}
}

/*ControllersDefaultControllerDotXPut swagger:route PUT /dot/{x} default_controller controllersDefaultControllerDotXPut

Paint a single pixel

*/
type ControllersDefaultControllerDotXPut struct {
	Context *middleware.Context
	Handler ControllersDefaultControllerDotXPutHandler
}

func (o *ControllersDefaultControllerDotXPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewControllersDefaultControllerDotXPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
